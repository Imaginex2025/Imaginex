{"version":3,"file":"webgl-Dscgy0Kb.js","sources":["../../node_modules/ogl/src/math/functions/Vec3Func.js","../../node_modules/ogl/src/math/Vec3.js","../../node_modules/ogl/src/core/Geometry.js","../../node_modules/ogl/src/core/Program.js","../../node_modules/ogl/src/core/Renderer.js","../../node_modules/ogl/src/math/functions/Vec4Func.js","../../node_modules/ogl/src/math/functions/QuatFunc.js","../../node_modules/ogl/src/math/Quat.js","../../node_modules/ogl/src/math/functions/Mat4Func.js","../../node_modules/ogl/src/math/Mat4.js","../../node_modules/ogl/src/math/functions/EulerFunc.js","../../node_modules/ogl/src/math/Euler.js","../../node_modules/ogl/src/core/Transform.js","../../node_modules/ogl/src/core/Camera.js","../../node_modules/ogl/src/math/functions/Mat3Func.js","../../node_modules/ogl/src/math/Mat3.js","../../node_modules/ogl/src/core/Mesh.js"],"sourcesContent":["const EPSILON = 0.000001;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n\n/**\n * Performs a frame rate independant, linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} decay decay constant for interpolation. useful range between 1 and 25, from slow to fast.\n * @param {Number} dt delta time\n * @returns {vec3} out\n */\nexport function smoothLerp(out, a, b, decay, dt) {\n    const exp = Math.exp(-decay * dt);\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n\n    out[0] = b[0] + (ax - b[0]) * exp;\n    out[1] = b[1] + (ay - b[1]) * exp;\n    out[2] = b[2] + (az - b[2]) * exp;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n\n/**\n * Same as above but doesn't apply translation.\n * Useful for rays.\n */\nexport function scaleRotateMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let qx = q[0],\n        qy = q[1],\n        qz = q[2],\n        qw = q[3];\n\n    let uvx = qy * z - qz * y;\n    let uvy = qz * x - qx * z;\n    let uvz = qx * y - qy * x;\n\n    let uuvx = qy * uvz - qz * uvy;\n    let uuvy = qz * uvx - qx * uvz;\n    let uuvz = qx * uvy - qy * uvx;\n\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport const angle = (function () {\n    const tempA = [0, 0, 0];\n    const tempB = [0, 0, 0];\n\n    return function (a, b) {\n        copy(tempA, a);\n        copy(tempB, b);\n\n        normalize(tempA, tempA);\n        normalize(tempB, tempB);\n\n        let cosine = dot(tempA, tempB);\n\n        if (cosine > 1.0) {\n            return 0;\n        } else if (cosine < -1.0) {\n            return Math.PI;\n        } else {\n            return Math.acos(cosine);\n        }\n    };\n})();\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n","import * as Vec3Func from './functions/Vec3Func.js';\n\nexport class Vec3 extends Array {\n    constructor(x = 0, y = x, z = x) {\n        super(x, y, z);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        Vec3Func.set(this, x, y, z);\n        return this;\n    }\n\n    copy(v) {\n        Vec3Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec3Func.add(this, va, vb);\n        else Vec3Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec3Func.subtract(this, va, vb);\n        else Vec3Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec3Func.multiply(this, this, v);\n        else Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec3Func.divide(this, this, v);\n        else Vec3Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec3Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec3Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec3Func.distance(this, v);\n        else return Vec3Func.length(this);\n    }\n\n    squaredLen() {\n        return Vec3Func.squaredLength(this);\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec3Func.squaredDistance(this, v);\n        else return Vec3Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec3Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) Vec3Func.cross(this, va, vb);\n        else Vec3Func.cross(this, this, va);\n        return this;\n    }\n\n    scale(v) {\n        Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec3Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec3Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec3Func.exactEquals(this, v);\n    }\n\n    applyMatrix3(mat3) {\n        Vec3Func.transformMat3(this, this, mat3);\n        return this;\n    }\n\n    applyMatrix4(mat4) {\n        Vec3Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    scaleRotateMatrix4(mat4) {\n        Vec3Func.scaleRotateMat4(this, this, mat4);\n        return this;\n    }\n\n    applyQuaternion(q) {\n        Vec3Func.transformQuat(this, this, q);\n        return this;\n    }\n\n    angle(v) {\n        return Vec3Func.angle(this, v);\n    }\n\n    lerp(v, t) {\n        Vec3Func.lerp(this, this, v, t);\n        return this;\n    }\n\n    smoothLerp(v, decay, dt) {\n        Vec3Func.smoothLerp(this, this, v, decay, dt);\n        return this;\n    }\n\n    clone() {\n        return new Vec3(this[0], this[1], this[2]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n\n    transformDirection(mat4) {\n        const x = this[0];\n        const y = this[1];\n        const z = this[2];\n\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n\n        return this.normalize();\n    }\n}\n","// attribute params\n// {\n//     data - typed array eg UInt16Array for indices, Float32Array\n//     size - int default 1\n//     instanced - default null. Pass divisor amount\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\n//     normalized - boolean default false\n\n//     buffer - gl buffer, if buffer exists, don't need to provide data - although needs position data for bounds calculation\n//     stride - default 0 - for when passing in buffer\n//     offset - default 0 - for when passing in buffer\n//     count - default null - for when passing in buffer\n//     min - array - for when passing in buffer\n//     max - array - for when passing in buffer\n// }\n\n// TODO: fit in transform feedback\n\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempVec3 = /* @__PURE__ */ new Vec3();\n\nlet ID = 1;\nlet ATTR_ID = 1;\n\n// To stop inifinite warnings\nlet isBoundsWarned = false;\n\nexport class Geometry {\n    constructor(gl, attributes = {}) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Geometry');\n        this.gl = gl;\n        this.attributes = attributes;\n        this.id = ID++;\n\n        // Store one VAO per program attribute locations order\n        this.VAOs = {};\n\n        this.drawRange = { start: 0, count: 0 };\n        this.instancedCount = 0;\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        this.gl.renderer.bindVertexArray(null);\n        this.gl.renderer.currentGeometry = null;\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // create the buffers\n        for (let key in attributes) {\n            this.addAttribute(key, attributes[key]);\n        }\n    }\n\n    addAttribute(key, attr) {\n        this.attributes[key] = attr;\n\n        // Set options\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\n        attr.size = attr.size || 1;\n        attr.type =\n            attr.type ||\n            (attr.data.constructor === Float32Array\n                ? this.gl.FLOAT\n                : attr.data.constructor === Uint16Array\n                ? this.gl.UNSIGNED_SHORT\n                : this.gl.UNSIGNED_INT); // Uint32Array\n        attr.target = key === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n        attr.normalized = attr.normalized || false;\n        attr.stride = attr.stride || 0;\n        attr.offset = attr.offset || 0;\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\n        attr.divisor = attr.instanced || 0;\n        attr.needsUpdate = false;\n        attr.usage = attr.usage || this.gl.STATIC_DRAW;\n\n        if (!attr.buffer) {\n            // Push data to buffer\n            this.updateAttribute(attr);\n        }\n\n        // Update geometry counts. If indexed, ignore regular attributes\n        if (attr.divisor) {\n            this.isInstanced = true;\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\n                console.warn('geometry has multiple instanced buffers of different length');\n                return (this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor));\n            }\n            this.instancedCount = attr.count * attr.divisor;\n        } else if (key === 'index') {\n            this.drawRange.count = attr.count;\n        } else if (!this.attributes.index) {\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\n        }\n    }\n\n    updateAttribute(attr) {\n        const isNewBuffer = !attr.buffer;\n        if (isNewBuffer) attr.buffer = this.gl.createBuffer();\n        if (this.glState.boundBuffer !== attr.buffer) {\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n        }\n        if (isNewBuffer) {\n            this.gl.bufferData(attr.target, attr.data, attr.usage);\n        } else {\n            this.gl.bufferSubData(attr.target, 0, attr.data);\n        }\n        attr.needsUpdate = false;\n    }\n\n    setIndex(value) {\n        this.addAttribute('index', value);\n    }\n\n    setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n    }\n\n    setInstancedCount(value) {\n        this.instancedCount = value;\n    }\n\n    createVAO(program) {\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n        this.bindAttributes(program);\n    }\n\n    bindAttributes(program) {\n        // Link all attributes to program using gl.vertexAttribPointer\n        program.attributeLocations.forEach((location, { name, type }) => {\n            // If geometry missing a required shader attribute\n            if (!this.attributes[name]) {\n                console.warn(`active attribute ${name} not being supplied`);\n                return;\n            }\n\n            const attr = this.attributes[name];\n\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n\n            // For matrix attributes, buffer needs to be defined per column\n            let numLoc = 1;\n            if (type === 35674) numLoc = 2; // mat2\n            if (type === 35675) numLoc = 3; // mat3\n            if (type === 35676) numLoc = 4; // mat4\n\n            const size = attr.size / numLoc;\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * 4;\n            const offset = numLoc === 1 ? 0 : numLoc * 4;\n\n            for (let i = 0; i < numLoc; i++) {\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\n                this.gl.enableVertexAttribArray(location + i);\n\n                // For instanced attributes, divisor needs to be set.\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\n            }\n        });\n\n        // Bind indices if geometry indexed\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\n    }\n\n    draw({ program, mode = this.gl.TRIANGLES }) {\n        if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n            this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\n        }\n\n        // Check if any attributes need updating\n        program.attributeLocations.forEach((location, { name }) => {\n            const attr = this.attributes[name];\n            if (attr.needsUpdate) this.updateAttribute(attr);\n        });\n\n        // For drawElements, offset needs to be multiple of type size\n        let indexBytesPerElement = 2;\n        if (this.attributes.index?.type === this.gl.UNSIGNED_INT) indexBytesPerElement = 4;\n\n        if (this.isInstanced) {\n            if (this.attributes.index) {\n                this.gl.renderer.drawElementsInstanced(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * indexBytesPerElement,\n                    this.instancedCount\n                );\n            } else {\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\n            }\n        } else {\n            if (this.attributes.index) {\n                this.gl.drawElements(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * indexBytesPerElement\n                );\n            } else {\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\n            }\n        }\n    }\n\n    getPosition() {\n        // Use position buffer, or min/max if available\n        const attr = this.attributes.position;\n        // if (attr.min) return [...attr.min, ...attr.max];\n        if (attr.data) return attr;\n        if (isBoundsWarned) return;\n        console.warn('No position buffer data found to compute bounds');\n        return (isBoundsWarned = true);\n    }\n\n    computeBoundingBox(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n\n        if (!this.bounds) {\n            this.bounds = {\n                min: new Vec3(),\n                max: new Vec3(),\n                center: new Vec3(),\n                scale: new Vec3(),\n                radius: Infinity,\n            };\n        }\n\n        const min = this.bounds.min;\n        const max = this.bounds.max;\n        const center = this.bounds.center;\n        const scale = this.bounds.scale;\n\n        min.set(+Infinity);\n        max.set(-Infinity);\n\n        // TODO: check size of position (eg triangle with Vec2)\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            const x = array[i];\n            const y = array[i + 1];\n            const z = array[i + 2];\n\n            min.x = Math.min(x, min.x);\n            min.y = Math.min(y, min.y);\n            min.z = Math.min(z, min.z);\n\n            max.x = Math.max(x, max.x);\n            max.y = Math.max(y, max.y);\n            max.z = Math.max(z, max.z);\n        }\n\n        scale.sub(max, min);\n        center.add(min, max).divide(2);\n    }\n\n    computeBoundingSphere(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n\n        if (!this.bounds) this.computeBoundingBox(attr);\n\n        let maxRadiusSq = 0;\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            tempVec3.fromArray(array, i);\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\n        }\n\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\n    }\n\n    remove() {\n        for (let key in this.VAOs) {\n            this.gl.renderer.deleteVertexArray(this.VAOs[key]);\n            delete this.VAOs[key];\n        }\n        for (let key in this.attributes) {\n            this.gl.deleteBuffer(this.attributes[key].buffer);\n            delete this.attributes[key];\n        }\n    }\n}\n","// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\n\nexport class Program {\n    constructor(\n        gl,\n        {\n            vertex,\n            fragment,\n            uniforms = {},\n\n            transparent = false,\n            cullFace = gl.BACK,\n            frontFace = gl.CCW,\n            depthTest = true,\n            depthWrite = true,\n            depthFunc = gl.LEQUAL,\n        } = {}\n    ) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Program');\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n\n        if (!vertex) console.warn('vertex shader not supplied');\n        if (!fragment) console.warn('fragment shader not supplied');\n\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n        this.stencilFunc = {};\n        this.stencilOp = {}\n\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n\n        // Create empty shaders and attach to program\n        this.vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        this.fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, this.vertexShader);\n        gl.attachShader(this.program, this.fragmentShader);\n\n        // Compile shaders with source\n        this.setShaders({ vertex, fragment });\n    }\n\n    setShaders({ vertex, fragment }) {\n        if (vertex) {\n            // compile vertex shader and log errors\n            this.gl.shaderSource(this.vertexShader, vertex);\n            this.gl.compileShader(this.vertexShader);\n            if (this.gl.getShaderInfoLog(this.vertexShader) !== '') {\n                console.warn(`${this.gl.getShaderInfoLog(this.vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n            }\n        }\n\n        if (fragment) {\n            // compile fragment shader and log errors\n            this.gl.shaderSource(this.fragmentShader, fragment);\n            this.gl.compileShader(this.fragmentShader);\n            if (this.gl.getShaderInfoLog(this.fragmentShader) !== '') {\n                console.warn(`${this.gl.getShaderInfoLog(this.fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n            }\n        }\n\n        // compile program and log errors\n        this.gl.linkProgram(this.program);\n        if (!this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS)) {\n            return console.warn(this.gl.getProgramInfoLog(this.program));\n        }\n\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_UNIFORMS);\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n            let uniform = this.gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, this.gl.getUniformLocation(this.program, uniform.name));\n\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n\n            uniform.uniformName = split[0];\n            uniform.nameComponents = split.slice(1);\n        }\n\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_ATTRIBUTES);\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n            const attribute = this.gl.getActiveAttrib(this.program, aIndex);\n            const location = this.gl.getAttribLocation(this.program, attribute.name);\n            // Ignore special built-in inputs. eg gl_VertexID, gl_InstanceID\n            if (location === -1) continue;\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join('');\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n\n    setStencilFunc(func, ref, mask) {\n        this.stencilRef = ref;\n        this.stencilFunc.func = func;\n        this.stencilFunc.ref = ref;\n        this.stencilFunc.mask = mask;\n    }\n\n    setStencilOp(stencilFail, depthFail, depthPass) {\n        this.stencilOp.stencilFail = stencilFail;\n        this.stencilOp.depthFail = depthFail;\n        this.stencilOp.depthPass = depthPass;\n    }\n\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src) this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n\n        if(this.stencilFunc.func || this.stencilOp.stencilFail) this.gl.renderer.enable(this.gl.STENCIL_TEST)\n            else this.gl.renderer.disable(this.gl.STENCIL_TEST)\n\n        this.gl.renderer.setStencilFunc(this.stencilFunc.func, this.stencilFunc.ref, this.stencilFunc.mask)\n        this.gl.renderer.setStencilOp(this.stencilOp.stencilFail, this.stencilOp.depthFail, this.stencilOp.depthPass)\n\n    }\n\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.state.currentProgram === this.id;\n\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.state.currentProgram = this.id;\n        }\n\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform) => {\n            let uniform = this.uniforms[activeUniform.uniformName];\n\n            for (const component of activeUniform.nameComponents) {\n                if (!uniform) break;\n\n                if (component in uniform) {\n                    uniform = uniform[component];\n                } else if (Array.isArray(uniform.value)) {\n                    break;\n                } else {\n                    uniform = undefined;\n                    break;\n                }\n            }\n\n            if (!uniform) {\n                return warn(`Active uniform ${activeUniform.name} has not been supplied`);\n            }\n\n            if (uniform && uniform.value === undefined) {\n                return warn(`${activeUniform.name} uniform is missing a value parameter`);\n            }\n\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value) => {\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\n\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n\n    switch (type) {\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670: // BOOL\n        case 5124: // INT\n        case 35678: // SAMPLER_2D\n        case 36306: // U_SAMPLER_2D\n        case 35680: // SAMPLER_CUBE\n        case 36289: // SAMPLER_2D_ARRAY\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671: // BOOL_VEC2\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672: // BOOL_VEC3\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673: // BOOL_VEC4\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\n\nfunction addLineNumbers(string) {\n    let lines = string.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\n\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n    return value;\n}\n\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for (let i = 0, l = a.length; i < l; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction setArray(a, b) {\n    for (let i = 0, l = a.length; i < l; i++) {\n        a[i] = b[i];\n    }\n}\n\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}\n","import { Vec3 } from '../math/Vec3.js';\n\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\n\n// Not automatic - devs to use these methods manually\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n// gl.clearColor( r, g, b, a );\n// gl.stencilMask( stencilMask );\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n// gl.clearStencil( stencil );\n\nconst tempVec3 = /* @__PURE__ */ new Vec3();\nlet ID = 1;\n\nexport class Renderer {\n    constructor({\n        canvas = document.createElement('canvas'),\n        width = 300,\n        height = 150,\n        dpr = 1,\n        alpha = false,\n        depth = true,\n        stencil = false,\n        antialias = false,\n        premultipliedAlpha = false,\n        preserveDrawingBuffer = false,\n        powerPreference = 'default',\n        autoClear = true,\n        webgl = 2,\n    } = {}) {\n        const attributes = { alpha, depth, stencil, antialias, premultipliedAlpha, preserveDrawingBuffer, powerPreference };\n        this.dpr = dpr;\n        this.alpha = alpha;\n        this.color = true;\n        this.depth = depth;\n        this.stencil = stencil;\n        this.premultipliedAlpha = premultipliedAlpha;\n        this.autoClear = autoClear;\n        this.id = ID++;\n\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\n        if (webgl === 2) this.gl = canvas.getContext('webgl2', attributes);\n        this.isWebgl2 = !!this.gl;\n        if (!this.gl) this.gl = canvas.getContext('webgl', attributes);\n        if (!this.gl) console.error('unable to create webgl context');\n\n        // Attach renderer to gl so that all classes have access to internal state functions\n        this.gl.renderer = this;\n\n        // initialise size values\n        this.setSize(width, height);\n\n        // gl state stores to avoid redundant calls on methods used internally\n        this.state = {};\n        this.state.blendFunc = { src: this.gl.ONE, dst: this.gl.ZERO };\n        this.state.blendEquation = { modeRGB: this.gl.FUNC_ADD };\n        this.state.cullFace = false;\n        this.state.frontFace = this.gl.CCW;\n        this.state.depthMask = true;\n        this.state.depthFunc = this.gl.LEQUAL;\n        this.state.premultiplyAlpha = false;\n        this.state.flipY = false;\n        this.state.unpackAlignment = 4;\n        this.state.framebuffer = null;\n        this.state.viewport = { x: 0, y: 0, width: null, height: null };\n        this.state.textureUnits = [];\n        this.state.activeTextureUnit = 0;\n        this.state.boundBuffer = null;\n        this.state.uniformLocations = new Map();\n        this.state.currentProgram = null;\n\n        // store requested extensions\n        this.extensions = {};\n\n        // Initialise extra format types\n        if (this.isWebgl2) {\n            this.getExtension('EXT_color_buffer_float');\n            this.getExtension('OES_texture_float_linear');\n        } else {\n            this.getExtension('OES_texture_float');\n            this.getExtension('OES_texture_float_linear');\n            this.getExtension('OES_texture_half_float');\n            this.getExtension('OES_texture_half_float_linear');\n            this.getExtension('OES_element_index_uint');\n            this.getExtension('OES_standard_derivatives');\n            this.getExtension('EXT_sRGB');\n            this.getExtension('WEBGL_depth_texture');\n            this.getExtension('WEBGL_draw_buffers');\n        }\n        this.getExtension('WEBGL_compressed_texture_astc');\n        this.getExtension('EXT_texture_compression_bptc');\n        this.getExtension('WEBGL_compressed_texture_s3tc');\n        this.getExtension('WEBGL_compressed_texture_etc1');\n        this.getExtension('WEBGL_compressed_texture_pvrtc');\n        this.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\n        this.vertexAttribDivisor = this.getExtension('ANGLE_instanced_arrays', 'vertexAttribDivisor', 'vertexAttribDivisorANGLE');\n        this.drawArraysInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawArraysInstanced', 'drawArraysInstancedANGLE');\n        this.drawElementsInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawElementsInstanced', 'drawElementsInstancedANGLE');\n        this.createVertexArray = this.getExtension('OES_vertex_array_object', 'createVertexArray', 'createVertexArrayOES');\n        this.bindVertexArray = this.getExtension('OES_vertex_array_object', 'bindVertexArray', 'bindVertexArrayOES');\n        this.deleteVertexArray = this.getExtension('OES_vertex_array_object', 'deleteVertexArray', 'deleteVertexArrayOES');\n        this.drawBuffers = this.getExtension('WEBGL_draw_buffers', 'drawBuffers', 'drawBuffersWEBGL');\n\n        // Store device parameters\n        this.parameters = {};\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.parameters.maxAnisotropy = this.getExtension('EXT_texture_filter_anisotropic')\n            ? this.gl.getParameter(this.getExtension('EXT_texture_filter_anisotropic').MAX_TEXTURE_MAX_ANISOTROPY_EXT)\n            : 0;\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n\n        this.gl.canvas.width = width * this.dpr;\n        this.gl.canvas.height = height * this.dpr;\n\n        if (!this.gl.canvas.style) return;\n        Object.assign(this.gl.canvas.style, {\n            width: width + 'px',\n            height: height + 'px',\n        });\n    }\n\n    setViewport(width, height, x = 0, y = 0) {\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\n        this.state.viewport.width = width;\n        this.state.viewport.height = height;\n        this.state.viewport.x = x;\n        this.state.viewport.y = y;\n        this.gl.viewport(x, y, width, height);\n    }\n\n    setScissor(width, height, x = 0, y = 0) {\n        this.gl.scissor(x, y, width, height);\n    }\n\n    enable(id) {\n        if (this.state[id] === true) return;\n        this.gl.enable(id);\n        this.state[id] = true;\n    }\n\n    disable(id) {\n        if (this.state[id] === false) return;\n        this.gl.disable(id);\n        this.state[id] = false;\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        if (\n            this.state.blendFunc.src === src &&\n            this.state.blendFunc.dst === dst &&\n            this.state.blendFunc.srcAlpha === srcAlpha &&\n            this.state.blendFunc.dstAlpha === dstAlpha\n        )\n            return;\n        this.state.blendFunc.src = src;\n        this.state.blendFunc.dst = dst;\n        this.state.blendFunc.srcAlpha = srcAlpha;\n        this.state.blendFunc.dstAlpha = dstAlpha;\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n        else this.gl.blendFunc(src, dst);\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        modeRGB = modeRGB || this.gl.FUNC_ADD;\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\n        this.state.blendEquation.modeRGB = modeRGB;\n        this.state.blendEquation.modeAlpha = modeAlpha;\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n        else this.gl.blendEquation(modeRGB);\n    }\n\n    setCullFace(value) {\n        if (this.state.cullFace === value) return;\n        this.state.cullFace = value;\n        this.gl.cullFace(value);\n    }\n\n    setFrontFace(value) {\n        if (this.state.frontFace === value) return;\n        this.state.frontFace = value;\n        this.gl.frontFace(value);\n    }\n\n    setDepthMask(value) {\n        if (this.state.depthMask === value) return;\n        this.state.depthMask = value;\n        this.gl.depthMask(value);\n    }\n\n    setDepthFunc(value) {\n        if (this.state.depthFunc === value) return;\n        this.state.depthFunc = value;\n        this.gl.depthFunc(value);\n    }\n\n    setStencilMask(value) {\n        if(this.state.stencilMask === value) return;\n        this.state.stencilMask = value;\n        this.gl.stencilMask(value)\n    }\n\n    setStencilFunc(func, ref, mask) {\n\n        if((this.state.stencilFunc === func) &&\n            (this.state.stencilRef === ref) &&\n            (this.state.stencilFuncMask === mask)\n        ) return;\n\n        this.state.stencilFunc = func || this.gl.ALWAYS;\n        this.state.stencilRef = ref || 0;\n        this.state.stencilFuncMask = mask || 0;\n\n        this.gl.stencilFunc(func || this.gl.ALWAYS, ref || 0, mask || 0);\n    }\n\n    setStencilOp(stencilFail, depthFail, depthPass) {\n\n        if(this.state.stencilFail === stencilFail &&\n            this.state.stencilDepthFail === depthFail &&\n            this.state.stencilDepthPass === depthPass\n        ) return;\n\n        this.state.stencilFail = stencilFail;\n        this.state.stencilDepthFail = depthFail;\n        this.state.stencilDepthPass = depthPass;\n        \n        this.gl.stencilOp(stencilFail, depthFail, depthPass);\n        \n    }\n\n    activeTexture(value) {\n        if (this.state.activeTextureUnit === value) return;\n        this.state.activeTextureUnit = value;\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\n    }\n\n    bindFramebuffer({ target = this.gl.FRAMEBUFFER, buffer = null } = {}) {\n        if (this.state.framebuffer === buffer) return;\n        this.state.framebuffer = buffer;\n        this.gl.bindFramebuffer(target, buffer);\n    }\n\n    getExtension(extension, webgl2Func, extFunc) {\n        // if webgl2 function supported, return func bound to gl context\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\n\n        // fetch extension once only\n        if (!this.extensions[extension]) {\n            this.extensions[extension] = this.gl.getExtension(extension);\n        }\n\n        // return extension if no function requested\n        if (!webgl2Func) return this.extensions[extension];\n\n        // Return null if extension not supported\n        if (!this.extensions[extension]) return null;\n\n        // return extension function, bound to extension\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\n    }\n\n    sortOpaque(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else if (a.zDepth !== b.zDepth) {\n            return a.zDepth - b.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortTransparent(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        }\n        if (a.zDepth !== b.zDepth) {\n            return b.zDepth - a.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortUI(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    getRenderList({ scene, camera, frustumCull, sort }) {\n        let renderList = [];\n\n        if (camera && frustumCull) camera.updateFrustum();\n\n        // Get visible\n        scene.traverse((node) => {\n            if (!node.visible) return true;\n            if (!node.draw) return;\n\n            if (frustumCull && node.frustumCulled && camera) {\n                if (!camera.frustumIntersectsMesh(node)) return;\n            }\n\n            renderList.push(node);\n        });\n\n        if (sort) {\n            const opaque = [];\n            const transparent = []; // depthTest true\n            const ui = []; // depthTest false\n\n            renderList.forEach((node) => {\n                // Split into the 3 render groups\n                if (!node.program.transparent) {\n                    opaque.push(node);\n                } else if (node.program.depthTest) {\n                    transparent.push(node);\n                } else {\n                    ui.push(node);\n                }\n\n                node.zDepth = 0;\n\n                // Only calculate z-depth if renderOrder unset and depthTest is true\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\n\n                // update z-depth\n                node.worldMatrix.getTranslation(tempVec3);\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\n                node.zDepth = tempVec3.z;\n            });\n\n            opaque.sort(this.sortOpaque);\n            transparent.sort(this.sortTransparent);\n            ui.sort(this.sortUI);\n\n            renderList = opaque.concat(transparent, ui);\n        }\n\n        return renderList;\n    }\n\n    render({ scene, camera, target = null, update = true, sort = true, frustumCull = true, clear }) {\n        if (target === null) {\n            // make sure no render target bound so draws to canvas\n            this.bindFramebuffer();\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\n        } else {\n            // bind supplied render target and update viewport\n            this.bindFramebuffer(target);\n            this.setViewport(target.width, target.height);\n        }\n\n        if (clear || (this.autoClear && clear !== false)) {\n            // Ensure depth buffer writing is enabled so it can be cleared\n            if (this.depth && (!target || target.depth)) {\n                this.enable(this.gl.DEPTH_TEST);\n                this.setDepthMask(true);\n            }\n\n            // Same for stencil\n            if(this.stencil || (!target || target.stencil)) {\n                this.enable(this.gl.STENCIL_TEST);\n                this.setStencilMask(0xff)\n            }\n\n            this.gl.clear(\n                (this.color ? this.gl.COLOR_BUFFER_BIT : 0) |\n                    (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) |\n                    (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0)\n            );\n        }\n\n        // updates all scene graph matrices\n        if (update) scene.updateMatrixWorld();\n\n        // Update camera separately, in case not in scene graph\n        if (camera) camera.updateMatrixWorld();\n\n        // Get render list - entails culling and sorting\n        const renderList = this.getRenderList({ scene, camera, frustumCull, sort });\n\n        renderList.forEach((node) => {\n            node.draw({ camera });\n        });\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n","import * as vec4 from './Vec4Func.js';\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    let s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let by = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bz = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    let omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n    let a0 = a[0],\n        a1 = a[1],\n        a2 = a[2],\n        a3 = a[3];\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    let invDot = dot ? 1.0 / dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    let fTrace = m[0] + m[4] + m[8];\n    let fRoot;\n\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        let j = (i + 1) % 3;\n        let k = (i + 2) % 3;\n\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n\n    return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, euler, order = 'YXZ') {\n    let sx = Math.sin(euler[0] * 0.5);\n    let cx = Math.cos(euler[0] * 0.5);\n    let sy = Math.sin(euler[1] * 0.5);\n    let cy = Math.cos(euler[1] * 0.5);\n    let sz = Math.sin(euler[2] * 0.5);\n    let cz = Math.cos(euler[2] * 0.5);\n\n    if (order === 'XYZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'YXZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'ZXY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'ZYX') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'YZX') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'XZY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    }\n\n    return out;\n}\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n","import * as QuatFunc from './functions/QuatFunc.js';\n\nexport class Quat extends Array {\n    constructor(x = 0, y = 0, z = 0, w = 1) {\n        super(x, y, z, w);\n        this.onChange = () => {};\n\n        // Keep reference to proxy target to avoid triggering onChange internally\n        this._target = this;\n\n        // Return a proxy to trigger onChange when array elements are edited directly\n        const triggerProps = ['0', '1', '2', '3'];\n        return new Proxy(this, {\n            set(target, property) {\n                const success = Reflect.set(...arguments);\n                if (success && triggerProps.includes(property)) target.onChange();\n                return success;\n            },\n        });\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    get w() {\n        return this[3];\n    }\n\n    set x(v) {\n        this._target[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this._target[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this._target[2] = v;\n        this.onChange();\n    }\n\n    set w(v) {\n        this._target[3] = v;\n        this.onChange();\n    }\n\n    identity() {\n        QuatFunc.identity(this._target);\n        this.onChange();\n        return this;\n    }\n\n    set(x, y, z, w) {\n        if (x.length) return this.copy(x);\n        QuatFunc.set(this._target, x, y, z, w);\n        this.onChange();\n        return this;\n    }\n\n    rotateX(a) {\n        QuatFunc.rotateX(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateY(a) {\n        QuatFunc.rotateY(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateZ(a) {\n        QuatFunc.rotateZ(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n\n    inverse(q = this._target) {\n        QuatFunc.invert(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    conjugate(q = this._target) {\n        QuatFunc.conjugate(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    copy(q) {\n        QuatFunc.copy(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    normalize(q = this._target) {\n        QuatFunc.normalize(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    multiply(qA, qB) {\n        if (qB) {\n            QuatFunc.multiply(this._target, qA, qB);\n        } else {\n            QuatFunc.multiply(this._target, this._target, qA);\n        }\n        this.onChange();\n        return this;\n    }\n\n    dot(v) {\n        return QuatFunc.dot(this._target, v);\n    }\n\n    fromMatrix3(matrix3) {\n        QuatFunc.fromMat3(this._target, matrix3);\n        this.onChange();\n        return this;\n    }\n\n    fromEuler(euler, isInternal) {\n        QuatFunc.fromEuler(this._target, euler, euler.order);\n        // Avoid infinite recursion\n        if (!isInternal) this.onChange();\n        return this;\n    }\n\n    fromAxisAngle(axis, a) {\n        QuatFunc.setAxisAngle(this._target, axis, a);\n        this.onChange();\n        return this;\n    }\n\n    slerp(q, t) {\n        QuatFunc.slerp(this._target, this._target, q, t);\n        this.onChange();\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this._target[0] = a[o];\n        this._target[1] = a[o + 1];\n        this._target[2] = a[o + 2];\n        this._target[3] = a[o + 3];\n        this.onChange();\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n","import * as vec3 from './Vec3Func.js';\n\nconst EPSILON = 0.000001;\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a03 = a[3];\n        let a12 = a[6],\n            a13 = a[7];\n        let a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    let b0 = b[0],\n        b1 = b[1],\n        b2 = b[2],\n        b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n    let x = axis[0],\n        y = axis[1],\n        z = axis[2];\n    let len = Math.hypot(x, y, z);\n    let s, c, t;\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    let b00, b01, b02;\n    let b10, b11, b12;\n    let b20, b21, b22;\n\n    if (Math.abs(len) < EPSILON) {\n        return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n\n    return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n\n    return out;\n}\n\nexport function getMaxScaleOnAxis(mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\n\n    return Math.sqrt(Math.max(x, y, z));\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport const getRotation = (function () {\n    const temp = [1, 1, 1];\n\n    return function (out, mat) {\n        let scaling = temp;\n        getScaling(scaling, mat);\n\n        let is1 = 1 / scaling[0];\n        let is2 = 1 / scaling[1];\n        let is3 = 1 / scaling[2];\n\n        let sm11 = mat[0] * is1;\n        let sm12 = mat[1] * is2;\n        let sm13 = mat[2] * is3;\n        let sm21 = mat[4] * is1;\n        let sm22 = mat[5] * is2;\n        let sm23 = mat[6] * is3;\n        let sm31 = mat[8] * is1;\n        let sm32 = mat[9] * is2;\n        let sm33 = mat[10] * is3;\n\n        let trace = sm11 + sm22 + sm33;\n        let S = 0;\n\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (sm23 - sm32) / S;\n            out[1] = (sm31 - sm13) / S;\n            out[2] = (sm12 - sm21) / S;\n        } else if (sm11 > sm22 && sm11 > sm33) {\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n            out[3] = (sm23 - sm32) / S;\n            out[0] = 0.25 * S;\n            out[1] = (sm12 + sm21) / S;\n            out[2] = (sm31 + sm13) / S;\n        } else if (sm22 > sm33) {\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n            out[3] = (sm31 - sm13) / S;\n            out[0] = (sm12 + sm21) / S;\n            out[1] = 0.25 * S;\n            out[2] = (sm23 + sm32) / S;\n        } else {\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n            out[3] = (sm12 - sm21) / S;\n            out[0] = (sm31 + sm13) / S;\n            out[1] = (sm23 + sm32) / S;\n            out[2] = 0.25 * S;\n        }\n\n        return out;\n    };\n})();\n\n/**\n * From glTF-Transform\n * https://github.com/donmccurdy/glTF-Transform/blob/main/packages/core/src/utils/math-utils.ts\n *\n * Decompose a mat4 to TRS properties.\n *\n * Equivalent to the Matrix4 decompose() method in three.js, and intentionally not using the\n * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param {mat4} srcMat Matrix element, to be decomposed to TRS properties.\n * @param {quat4} dstRotation Rotation element, to be overwritten.\n * @param {vec3} dstTranslation Translation element, to be overwritten.\n * @param {vec3} dstScale Scale element, to be overwritten\n */\nexport function decompose(srcMat, dstRotation, dstTranslation, dstScale) {\n    let sx = vec3.length([srcMat[0], srcMat[1], srcMat[2]]);\n    const sy = vec3.length([srcMat[4], srcMat[5], srcMat[6]]);\n    const sz = vec3.length([srcMat[8], srcMat[9], srcMat[10]]);\n\n    // if determine is negative, we need to invert one scale\n    const det = determinant(srcMat);\n    if (det < 0) sx = -sx;\n\n    dstTranslation[0] = srcMat[12];\n    dstTranslation[1] = srcMat[13];\n    dstTranslation[2] = srcMat[14];\n\n    // scale the rotation part\n    const _m1 = srcMat.slice();\n\n    const invSX = 1 / sx;\n    const invSY = 1 / sy;\n    const invSZ = 1 / sz;\n\n    _m1[0] *= invSX;\n    _m1[1] *= invSX;\n    _m1[2] *= invSX;\n\n    _m1[4] *= invSY;\n    _m1[5] *= invSY;\n    _m1[6] *= invSY;\n\n    _m1[8] *= invSZ;\n    _m1[9] *= invSZ;\n    _m1[10] *= invSZ;\n\n    getRotation(dstRotation, _m1);\n\n    dstScale[0] = sx;\n    dstScale[1] = sy;\n    dstScale[2] = sz;\n}\n\n/**\n * From glTF-Transform\n * https://github.com/donmccurdy/glTF-Transform/blob/main/packages/core/src/utils/math-utils.ts\n *\n * Compose TRS properties to a mat4.\n *\n * Equivalent to the Matrix4 compose() method in three.js, and intentionally not using the\n * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param {mat4} dstMat Matrix element, to be modified and returned.\n * @param {quat4} srcRotation Rotation element of matrix.\n * @param {vec3} srcTranslation Translation element of matrix.\n * @param {vec3} srcScale Scale element of matrix.\n * @returns {mat4} dstMat, overwritten to mat4 equivalent of given TRS properties.\n */\nexport function compose(dstMat, srcRotation, srcTranslation, srcScale) {\n    const te = dstMat;\n\n    const x = srcRotation[0],\n        y = srcRotation[1],\n        z = srcRotation[2],\n        w = srcRotation[3];\n    const x2 = x + x,\n        y2 = y + y,\n        z2 = z + z;\n    const xx = x * x2,\n        xy = x * y2,\n        xz = x * z2;\n    const yy = y * y2,\n        yz = y * z2,\n        zz = z * z2;\n    const wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    const sx = srcScale[0],\n        sy = srcScale[1],\n        sz = srcScale[2];\n\n    te[0] = (1 - (yy + zz)) * sx;\n    te[1] = (xy + wz) * sx;\n    te[2] = (xz - wy) * sx;\n    te[3] = 0;\n\n    te[4] = (xy - wz) * sy;\n    te[5] = (1 - (xx + zz)) * sy;\n    te[6] = (yz + wx) * sy;\n    te[7] = 0;\n\n    te[8] = (xz + wy) * sz;\n    te[9] = (yz - wx) * sz;\n    te[10] = (1 - (xx + yy)) * sz;\n    te[11] = 0;\n\n    te[12] = srcTranslation[0];\n    te[13] = srcTranslation[1];\n    te[14] = srcTranslation[2];\n    te[15] = 1;\n\n    return te;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = s[0];\n    let sy = s[1];\n    let sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 2 * far * near * nf;\n    out[15] = 0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n    let lr = 1 / (left - right);\n    let bt = 1 / (bottom - top);\n    let nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} target Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n    let eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2];\n\n    let z0 = eyex - target[0],\n        z1 = eyey - target[1],\n        z2 = eyez - target[2];\n\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len === 0) {\n        // eye and target are in the same position\n        z2 = 1;\n    } else {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n\n    let x0 = upy * z2 - upz * z1,\n        x1 = upz * z0 - upx * z2,\n        x2 = upx * z1 - upy * z0;\n\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len === 0) {\n        // up and z are parallel\n        if (upz) {\n            upx += 1e-6;\n        } else if (upy) {\n            upz += 1e-6;\n        } else {\n            upy += 1e-6;\n        }\n        (x0 = upy * z2 - upz * z1), (x1 = upz * z0 - upx * z2), (x2 = upx * z1 - upy * z0);\n\n        len = x0 * x0 + x1 * x1 + x2 * x2;\n    }\n\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n","import * as Mat4Func from './functions/Mat4Func.js';\n\nexport class Mat4 extends Array {\n    constructor(\n        m00 = 1,\n        m01 = 0,\n        m02 = 0,\n        m03 = 0,\n        m10 = 0,\n        m11 = 1,\n        m12 = 0,\n        m13 = 0,\n        m20 = 0,\n        m21 = 0,\n        m22 = 1,\n        m23 = 0,\n        m30 = 0,\n        m31 = 0,\n        m32 = 0,\n        m33 = 1\n    ) {\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    get x() {\n        return this[12];\n    }\n\n    get y() {\n        return this[13];\n    }\n\n    get z() {\n        return this[14];\n    }\n\n    get w() {\n        return this[15];\n    }\n\n    set x(v) {\n        this[12] = v;\n    }\n\n    set y(v) {\n        this[13] = v;\n    }\n\n    set z(v) {\n        this[14] = v;\n    }\n\n    set w(v) {\n        this[15] = v;\n    }\n\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n        if (m00.length) return this.copy(m00);\n        Mat4Func.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat4Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, axis, m = this) {\n        Mat4Func.rotate(this, m, v, axis);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat4Func.scale(this, m, typeof v === 'number' ? [v, v, v] : v);\n        return this;\n    }\n\n    add(ma, mb) {\n        if (mb) Mat4Func.add(this, ma, mb);\n        else Mat4Func.add(this, this, ma);\n        return this;\n    }\n\n    sub(ma, mb) {\n        if (mb) Mat4Func.subtract(this, ma, mb);\n        else Mat4Func.subtract(this, this, ma);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (!ma.length) {\n            Mat4Func.multiplyScalar(this, this, ma);\n        } else if (mb) {\n            Mat4Func.multiply(this, ma, mb);\n        } else {\n            Mat4Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat4Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat4Func.copy(this, m);\n        return this;\n    }\n\n    fromPerspective({ fov, aspect, near, far } = {}) {\n        Mat4Func.perspective(this, fov, aspect, near, far);\n        return this;\n    }\n\n    fromOrthogonal({ left, right, bottom, top, near, far }) {\n        Mat4Func.ortho(this, left, right, bottom, top, near, far);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat4Func.fromQuat(this, q);\n        return this;\n    }\n\n    setPosition(v) {\n        this.x = v[0];\n        this.y = v[1];\n        this.z = v[2];\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat4Func.invert(this, m);\n        return this;\n    }\n\n    compose(q, pos, scale) {\n        Mat4Func.compose(this, q, pos, scale);\n        return this;\n    }\n\n    decompose(q, pos, scale) {\n        Mat4Func.decompose(this, q, pos, scale);\n        return this;\n    }\n\n    getRotation(q) {\n        Mat4Func.getRotation(q, this);\n        return this;\n    }\n\n    getTranslation(pos) {\n        Mat4Func.getTranslation(pos, this);\n        return this;\n    }\n\n    getScaling(scale) {\n        Mat4Func.getScaling(scale, this);\n        return this;\n    }\n\n    getMaxScaleOnAxis() {\n        return Mat4Func.getMaxScaleOnAxis(this);\n    }\n\n    lookAt(eye, target, up) {\n        Mat4Func.targetTo(this, eye, target, up);\n        return this;\n    }\n\n    determinant() {\n        return Mat4Func.determinant(this);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this[4] = a[o + 4];\n        this[5] = a[o + 5];\n        this[6] = a[o + 6];\n        this[7] = a[o + 7];\n        this[8] = a[o + 8];\n        this[9] = a[o + 9];\n        this[10] = a[o + 10];\n        this[11] = a[o + 11];\n        this[12] = a[o + 12];\n        this[13] = a[o + 13];\n        this[14] = a[o + 14];\n        this[15] = a[o + 15];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        a[o + 4] = this[4];\n        a[o + 5] = this[5];\n        a[o + 6] = this[6];\n        a[o + 7] = this[7];\n        a[o + 8] = this[8];\n        a[o + 9] = this[9];\n        a[o + 10] = this[10];\n        a[o + 11] = this[11];\n        a[o + 12] = this[12];\n        a[o + 13] = this[13];\n        a[o + 14] = this[14];\n        a[o + 15] = this[15];\n        return a;\n    }\n}\n","// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nexport function fromRotationMatrix(out, m, order = 'YXZ') {\n    if (order === 'XYZ') {\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\n        if (Math.abs(m[8]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[2] = Math.atan2(-m[4], m[0]);\n        } else {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[2] = 0;\n        }\n    } else if (order === 'YXZ') {\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\n        if (Math.abs(m[9]) < 0.99999) {\n            out[1] = Math.atan2(m[8], m[10]);\n            out[2] = Math.atan2(m[1], m[5]);\n        } else {\n            out[1] = Math.atan2(-m[2], m[0]);\n            out[2] = 0;\n        }\n    } else if (order === 'ZXY') {\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\n        if (Math.abs(m[6]) < 0.99999) {\n            out[1] = Math.atan2(-m[2], m[10]);\n            out[2] = Math.atan2(-m[4], m[5]);\n        } else {\n            out[1] = 0;\n            out[2] = Math.atan2(m[1], m[0]);\n        }\n    } else if (order === 'ZYX') {\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\n        if (Math.abs(m[2]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[10]);\n            out[2] = Math.atan2(m[1], m[0]);\n        } else {\n            out[0] = 0;\n            out[2] = Math.atan2(-m[4], m[5]);\n        }\n    } else if (order === 'YZX') {\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\n        if (Math.abs(m[1]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[5]);\n            out[1] = Math.atan2(-m[2], m[0]);\n        } else {\n            out[0] = 0;\n            out[1] = Math.atan2(m[8], m[10]);\n        }\n    } else if (order === 'XZY') {\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\n        if (Math.abs(m[4]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[1] = Math.atan2(m[8], m[0]);\n        } else {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[1] = 0;\n        }\n    }\n\n    return out;\n}\n","import * as EulerFunc from './functions/EulerFunc.js';\nimport { Mat4 } from './Mat4.js';\n\nconst tmpMat4 = /* @__PURE__ */ new Mat4();\n\nexport class Euler extends Array {\n    constructor(x = 0, y = x, z = x, order = 'YXZ') {\n        super(x, y, z);\n        this.order = order;\n        this.onChange = () => {};\n\n        // Keep reference to proxy target to avoid triggering onChange internally\n        this._target = this;\n\n        // Return a proxy to trigger onChange when array elements are edited directly\n        const triggerProps = ['0', '1', '2'];\n        return new Proxy(this, {\n            set(target, property) {\n                const success = Reflect.set(...arguments);\n                if (success && triggerProps.includes(property)) target.onChange();\n                return success;\n            },\n        });\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this._target[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this._target[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this._target[2] = v;\n        this.onChange();\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        this._target[0] = x;\n        this._target[1] = y;\n        this._target[2] = z;\n        this.onChange();\n        return this;\n    }\n\n    copy(v) {\n        this._target[0] = v[0];\n        this._target[1] = v[1];\n        this._target[2] = v[2];\n        this.onChange();\n        return this;\n    }\n\n    reorder(order) {\n        this._target.order = order;\n        this.onChange();\n        return this;\n    }\n\n    fromRotationMatrix(m, order = this.order) {\n        EulerFunc.fromRotationMatrix(this._target, m, order);\n        this.onChange();\n        return this;\n    }\n\n    fromQuaternion(q, order = this.order, isInternal) {\n        tmpMat4.fromQuaternion(q);\n        this._target.fromRotationMatrix(tmpMat4, order);\n        // Avoid infinite recursion\n        if (!isInternal) this.onChange();\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this._target[0] = a[o];\n        this._target[1] = a[o + 1];\n        this._target[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n}\n","import { Vec3 } from '../math/Vec3.js';\nimport { Quat } from '../math/Quat.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Euler } from '../math/Euler.js';\n\nexport class Transform {\n    constructor() {\n        this.parent = null;\n        this.children = [];\n        this.visible = true;\n\n        this.matrix = new Mat4();\n        this.worldMatrix = new Mat4();\n        this.matrixAutoUpdate = true;\n        this.worldMatrixNeedsUpdate = false;\n\n        this.position = new Vec3();\n        this.quaternion = new Quat();\n        this.scale = new Vec3(1);\n        this.rotation = new Euler();\n        this.up = new Vec3(0, 1, 0);\n\n        this.rotation._target.onChange = () => this.quaternion.fromEuler(this.rotation, true);\n        this.quaternion._target.onChange = () => this.rotation.fromQuaternion(this.quaternion, undefined, true);\n    }\n\n    setParent(parent, notifyParent = true) {\n        if (this.parent && parent !== this.parent) this.parent.removeChild(this, false);\n        this.parent = parent;\n        if (notifyParent && parent) parent.addChild(this, false);\n    }\n\n    addChild(child, notifyChild = true) {\n        if (!~this.children.indexOf(child)) this.children.push(child);\n        if (notifyChild) child.setParent(this, false);\n    }\n\n    removeChild(child, notifyChild = true) {\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\n        if (notifyChild) child.setParent(null, false);\n    }\n\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.worldMatrixNeedsUpdate || force) {\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\n            this.worldMatrixNeedsUpdate = false;\n            force = true;\n        }\n\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].updateMatrixWorld(force);\n        }\n    }\n\n    updateMatrix() {\n        this.matrix.compose(this.quaternion, this.position, this.scale);\n        this.worldMatrixNeedsUpdate = true;\n    }\n\n    traverse(callback) {\n        // Return true in callback to stop traversing children\n        if (callback(this)) return;\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverse(callback);\n        }\n    }\n\n    decompose() {\n        this.matrix.decompose(this.quaternion._target, this.position, this.scale);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    lookAt(target, invert = false) {\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\n        else this.matrix.lookAt(target, this.position, this.up);\n        this.matrix.getRotation(this.quaternion._target);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n}\n","import { Transform } from './Transform.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempMat4 = /* @__PURE__ */ new Mat4();\nconst tempVec3a = /* @__PURE__ */ new Vec3();\nconst tempVec3b = /* @__PURE__ */ new Vec3();\n\nexport class Camera extends Transform {\n    constructor(gl, { near = 0.1, far = 100, fov = 45, aspect = 1, left, right, bottom, top, zoom = 1 } = {}) {\n        super();\n\n        Object.assign(this, { near, far, fov, aspect, left, right, bottom, top, zoom });\n\n        this.projectionMatrix = new Mat4();\n        this.viewMatrix = new Mat4();\n        this.projectionViewMatrix = new Mat4();\n        this.worldPosition = new Vec3();\n\n        // Use orthographic if left/right set, else default to perspective camera\n        this.type = left || right ? 'orthographic' : 'perspective';\n\n        if (this.type === 'orthographic') this.orthographic();\n        else this.perspective();\n    }\n\n    perspective({ near = this.near, far = this.far, fov = this.fov, aspect = this.aspect } = {}) {\n        Object.assign(this, { near, far, fov, aspect });\n        this.projectionMatrix.fromPerspective({ fov: fov * (Math.PI / 180), aspect, near, far });\n        this.type = 'perspective';\n        return this;\n    }\n\n    orthographic({\n        near = this.near,\n        far = this.far,\n        left = this.left || -1,\n        right = this.right || 1,\n        bottom = this.bottom || -1,\n        top = this.top || 1,\n        zoom = this.zoom,\n    } = {}) {\n        Object.assign(this, { near, far, left, right, bottom, top, zoom });\n        left /= zoom;\n        right /= zoom;\n        bottom /= zoom;\n        top /= zoom;\n        this.projectionMatrix.fromOrthogonal({ left, right, bottom, top, near, far });\n        this.type = 'orthographic';\n        return this;\n    }\n\n    updateMatrixWorld() {\n        super.updateMatrixWorld();\n        this.viewMatrix.inverse(this.worldMatrix);\n        this.worldMatrix.getTranslation(this.worldPosition);\n\n        // used for sorting\n        this.projectionViewMatrix.multiply(this.projectionMatrix, this.viewMatrix);\n        return this;\n    }\n\n    updateProjectionMatrix() {\n        if (this.type === 'perspective') {\n            return this.perspective();\n        } else {\n            return this.orthographic();\n        }\n    }\n\n    lookAt(target) {\n        super.lookAt(target, true);\n        return this;\n    }\n\n    // Project 3D coordinate to 2D point\n    project(v) {\n        v.applyMatrix4(this.viewMatrix);\n        v.applyMatrix4(this.projectionMatrix);\n        return this;\n    }\n\n    // Unproject 2D point to 3D coordinate\n    unproject(v) {\n        v.applyMatrix4(tempMat4.inverse(this.projectionMatrix));\n        v.applyMatrix4(this.worldMatrix);\n        return this;\n    }\n\n    updateFrustum() {\n        if (!this.frustum) {\n            this.frustum = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n        }\n\n        const m = this.projectionViewMatrix;\n        this.frustum[0].set(m[3] - m[0], m[7] - m[4], m[11] - m[8]).constant = m[15] - m[12]; // -x\n        this.frustum[1].set(m[3] + m[0], m[7] + m[4], m[11] + m[8]).constant = m[15] + m[12]; // +x\n        this.frustum[2].set(m[3] + m[1], m[7] + m[5], m[11] + m[9]).constant = m[15] + m[13]; // +y\n        this.frustum[3].set(m[3] - m[1], m[7] - m[5], m[11] - m[9]).constant = m[15] - m[13]; // -y\n        this.frustum[4].set(m[3] - m[2], m[7] - m[6], m[11] - m[10]).constant = m[15] - m[14]; // +z (far)\n        this.frustum[5].set(m[3] + m[2], m[7] + m[6], m[11] + m[10]).constant = m[15] + m[14]; // -z (near)\n\n        for (let i = 0; i < 6; i++) {\n            const invLen = 1.0 / this.frustum[i].distance();\n            this.frustum[i].multiply(invLen);\n            this.frustum[i].constant *= invLen;\n        }\n    }\n\n    frustumIntersectsMesh(node, worldMatrix = node.worldMatrix) {\n        // If no position attribute, treat as frustumCulled false\n        if (!node.geometry.attributes.position) return true;\n\n        if (!node.geometry.bounds || node.geometry.bounds.radius === Infinity) node.geometry.computeBoundingSphere();\n\n        if (!node.geometry.bounds) return true;\n\n        const center = tempVec3a;\n        center.copy(node.geometry.bounds.center);\n        center.applyMatrix4(worldMatrix);\n\n        const radius = node.geometry.bounds.radius * worldMatrix.getMaxScaleOnAxis();\n\n        return this.frustumIntersectsSphere(center, radius);\n    }\n\n    frustumIntersectsSphere(center, radius) {\n        const normal = tempVec3b;\n\n        for (let i = 0; i < 6; i++) {\n            const plane = this.frustum[i];\n            const distance = normal.copy(plane).dot(center) + plane.constant;\n            if (distance < -radius) return false;\n        }\n        return true;\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n}\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b01 = a22 * a11 - a12 * a21;\n    let b11 = -a22 * a10 + a12 * a20;\n    let b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b00 = b[0],\n        b01 = b[1],\n        b02 = b[2];\n    let b10 = b[3],\n        b11 = b[4],\n        b12 = b[5];\n    let b20 = b[6],\n        b21 = b[7],\n        b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        x = v[0],\n        y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nexport function normalFromMat4(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n}\n","import * as Mat3Func from './functions/Mat3Func.js';\n\nexport class Mat3 extends Array {\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\n        super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n        if (m00.length) return this.copy(m00);\n        Mat3Func.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat3Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, m = this) {\n        Mat3Func.rotate(this, m, v);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat3Func.scale(this, m, v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            Mat3Func.multiply(this, ma, mb);\n        } else {\n            Mat3Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat3Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat3Func.copy(this, m);\n        return this;\n    }\n\n    fromMatrix4(m) {\n        Mat3Func.fromMat4(this, m);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat3Func.fromQuat(this, q);\n        return this;\n    }\n\n    fromBasis(vec3a, vec3b, vec3c) {\n        this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat3Func.invert(this, m);\n        return this;\n    }\n\n    getNormalMatrix(m) {\n        Mat3Func.normalFromMat4(this, m);\n        return this;\n    }\n}\n","import { Transform } from './Transform.js';\nimport { Mat3 } from '../math/Mat3.js';\nimport { Mat4 } from '../math/Mat4.js';\n\nlet ID = 0;\n\nexport class Mesh extends Transform {\n    constructor(gl, { geometry, program, mode = gl.TRIANGLES, frustumCulled = true, renderOrder = 0 } = {}) {\n        super();\n        if (!gl.canvas) console.error('gl not passed as first argument to Mesh');\n        this.gl = gl;\n        this.id = ID++;\n        this.geometry = geometry;\n        this.program = program;\n        this.mode = mode;\n\n        // Used to skip frustum culling\n        this.frustumCulled = frustumCulled;\n\n        // Override sorting to force an order\n        this.renderOrder = renderOrder;\n        this.modelViewMatrix = new Mat4();\n        this.normalMatrix = new Mat3();\n        this.beforeRenderCallbacks = [];\n        this.afterRenderCallbacks = [];\n    }\n\n    onBeforeRender(f) {\n        this.beforeRenderCallbacks.push(f);\n        return this;\n    }\n\n    onAfterRender(f) {\n        this.afterRenderCallbacks.push(f);\n        return this;\n    }\n\n    draw({ camera } = {}) {\n        if (camera) {\n            // Add empty matrix uniforms to program if unset\n            if (!this.program.uniforms.modelMatrix) {\n                Object.assign(this.program.uniforms, {\n                    modelMatrix: { value: null },\n                    viewMatrix: { value: null },\n                    modelViewMatrix: { value: null },\n                    normalMatrix: { value: null },\n                    projectionMatrix: { value: null },\n                    cameraPosition: { value: null },\n                });\n            }\n\n            // Set the matrix uniforms\n            this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\n            this.program.uniforms.cameraPosition.value = camera.worldPosition;\n            this.program.uniforms.viewMatrix.value = camera.viewMatrix;\n            this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n            this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n            this.program.uniforms.modelMatrix.value = this.worldMatrix;\n            this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\n            this.program.uniforms.normalMatrix.value = this.normalMatrix;\n        }\n        this.beforeRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n\n        // determine if faces need to be flipped - when mesh scaled negatively\n        let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\n        this.program.use({ flipFaces });\n        this.geometry.draw({ mode: this.mode, program: this.program });\n        this.afterRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n    }\n}\n"],"names":["length","a","x","y","z","copy","out","set","add","b","subtract","multiply","divide","scale","distance","squaredDistance","squaredLength","negate","inverse","normalize","len","dot","cross","ax","ay","az","bx","by","bz","lerp","t","smoothLerp","decay","dt","exp","transformMat4","m","w","scaleRotateMat4","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","angle","tempA","tempB","cosine","exactEquals","Vec3","v","Vec3Func.set","Vec3Func.copy","va","vb","Vec3Func.add","Vec3Func.subtract","Vec3Func.multiply","Vec3Func.scale","Vec3Func.divide","Vec3Func.inverse","Vec3Func.length","Vec3Func.distance","Vec3Func.squaredLength","Vec3Func.squaredDistance","Vec3Func.negate","Vec3Func.cross","Vec3Func.normalize","Vec3Func.dot","Vec3Func.exactEquals","mat3","Vec3Func.transformMat3","mat4","Vec3Func.transformMat4","Vec3Func.scaleRotateMat4","Vec3Func.transformQuat","Vec3Func.angle","Vec3Func.lerp","Vec3Func.smoothLerp","o","tempVec3","ID","ATTR_ID","isBoundsWarned","Geometry","gl","attributes","key","attr","isNewBuffer","value","start","count","program","location","name","type","numLoc","size","stride","offset","i","mode","indexBytesPerElement","array","min","max","center","l","maxRadiusSq","arrayCacheF32","Program","vertex","fragment","uniforms","transparent","cullFace","frontFace","depthTest","depthWrite","depthFunc","addLineNumbers","numUniforms","uIndex","uniform","split","locations","numAttribs","aIndex","attribute","src","dst","srcAlpha","dstAlpha","modeRGB","modeAlpha","func","ref","mask","stencilFail","depthFail","depthPass","flipFaces","textureUnit","activeUniform","component","warn","setUniform","textureUnits","flatten","setValue","arraysEqual","setArray","string","lines","arrayLen","valueLen","warnCount","message","Renderer","canvas","width","height","dpr","alpha","depth","stencil","antialias","premultipliedAlpha","preserveDrawingBuffer","powerPreference","autoClear","webgl","id","target","buffer","extension","webgl2Func","extFunc","scene","camera","frustumCull","sort","renderList","node","opaque","ui","update","clear","identity","setAxisAngle","axis","rad","s","aw","bw","rotateX","rotateY","rotateZ","slerp","omega","cosom","sinom","scale0","scale1","invert","a0","a1","a2","a3","invDot","conjugate","fromMat3","fTrace","fRoot","j","k","fromEuler","euler","order","sx","cx","sy","cy","sz","cz","vec4.copy","vec4.set","vec4.dot","vec4.normalize","Quat","triggerProps","property","success","QuatFunc.identity","QuatFunc.set","QuatFunc.rotateX","QuatFunc.rotateY","QuatFunc.rotateZ","QuatFunc.invert","QuatFunc.conjugate","QuatFunc.copy","QuatFunc.normalize","qA","qB","QuatFunc.multiply","QuatFunc.dot","matrix3","QuatFunc.fromMat3","isInternal","QuatFunc.fromEuler","QuatFunc.setAxisAngle","QuatFunc.slerp","EPSILON","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","determinant","b0","b1","b2","b3","translate","rotate","b12","b20","b21","b22","getTranslation","mat","getScaling","getMaxScaleOnAxis","getRotation","temp","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","decompose","srcMat","dstRotation","dstTranslation","dstScale","vec3.length","_m1","invSX","invSY","invSZ","compose","dstMat","srcRotation","srcTranslation","srcScale","te","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat","yx","zx","zy","perspective","fovy","aspect","near","far","f","nf","ortho","left","right","bottom","top","lr","bt","targetTo","eye","up","eyex","eyey","eyez","upx","upy","upz","z0","z1","x0","x1","multiplyScalar","Mat4","Mat4Func.set","Mat4Func.translate","Mat4Func.rotate","Mat4Func.scale","ma","mb","Mat4Func.add","Mat4Func.subtract","Mat4Func.multiply","Mat4Func.multiplyScalar","Mat4Func.identity","Mat4Func.copy","fov","Mat4Func.perspective","Mat4Func.ortho","Mat4Func.fromQuat","Mat4Func.invert","pos","Mat4Func.compose","Mat4Func.decompose","Mat4Func.getRotation","Mat4Func.getTranslation","Mat4Func.getScaling","Mat4Func.getMaxScaleOnAxis","Mat4Func.targetTo","Mat4Func.determinant","fromRotationMatrix","tmpMat4","Euler","EulerFunc.fromRotationMatrix","Transform","parent","notifyParent","child","notifyChild","force","callback","tempMat4","tempVec3a","tempVec3b","Camera","zoom","invLen","worldMatrix","radius","normal","plane","fromMat4","c","normalFromMat4","Mat3","Mat3Func.set","Mat3Func.translate","Mat3Func.rotate","Mat3Func.scale","Mat3Func.multiply","Mat3Func.identity","Mat3Func.copy","Mat3Func.fromMat4","Mat3Func.fromQuat","vec3a","vec3b","vec3c","Mat3Func.invert","Mat3Func.normalFromMat4","Mesh","geometry","frustumCulled","renderOrder"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}